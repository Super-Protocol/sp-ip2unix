// SPDX-License-Identifier: LGPL-3.0-only
#include <array>
#include <stdexcept>
#include <sys/types.h>
#include <unistd.h>

#include "rng.hh"
#include "dynports.hh"

/*
 * This is an array of port offsets which is generated by scripts/genoffsets.py
 * and will be substituted here accordingly.
 */
@PORT_OFFSETS@

static uint16_t get_random_port(void)
{
    return RNG::get<uint16_t>(1024, 65535);
}

/*
 * Here we get a random offset from PORT_OFFSETS, which is an array of primes
 * which are not a multiple of the ephemeral port range (from 1024 to 65535).
 *
 * The reason we do this is is to assign ports in a non-incremental way but
 * just adding the offset everytime we acquire() a new port.
 */
static uint16_t get_random_offset(void)
{
    return PORT_OFFSETS[RNG::get<uint16_t>(0, PORT_OFFSETS.size() - 1)];
}

DynPorts::DynPorts()
    : reserved()
    , current(get_random_port())
    , offset(get_random_offset())
{
}

uint16_t DynPorts::rotate_port(uint16_t port, uint16_t off) const
{
    uint32_t tries = 0;
    uint32_t bounds = 65536 - 1024;

    do {
        uint32_t base = static_cast<uint32_t>(port) - 1024;
        base = (base + off) % bounds;
        port = base + 1024;

        if (++tries > bounds)
            throw std::overflow_error("Ephemeral ports exhausted");
    } while (this->reserved.find(port) != this->reserved.end());

    return port;
}

uint16_t DynPorts::acquire(void) {
    return this->current = this->rotate_port(this->current, this->offset);
}

uint16_t DynPorts::reserve(uint16_t port)
{
    if (port == 0) {
        port = get_random_port();
        if (this->reserved.find(port) != this->reserved.end())
            port = this->rotate_port(port, 1);
    }

    this->reserved.emplace(port);
    return port;
}
